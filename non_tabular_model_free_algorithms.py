# -*- coding: utf-8 -*-
"""Non_Tabular_Model_free_Algorithms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xD6rbdI8gzypL4l89LCRWO18limxg3Tj
"""
import numpy as np
class LinearWrapper:
    def __init__(self, env):
        self.env = env
        
        self.n_actions = self.env.n_actions
        self.n_states = self.env.n_states
        self.n_features = self.n_actions * self.n_states
        
    def encode_state(self, s):
        features = np.zeros((self.n_actions, self.n_features))
        for a in range(self.n_actions):
            i = np.ravel_multi_index((s, a), (self.n_states, self.n_actions))
            features[a, i] = 1.0
          
        return features
    
    def decode_policy(self, theta):
        policy = np.zeros(self.env.n_states, dtype=int)
        value = np.zeros(self.env.n_states)
        
        for s in range(self.n_states):
            features = self.encode_state(s)
            q = features.dot(theta)
            
            policy[s] = np.argmax(q)
            value[s] = np.max(q)
        
        return policy, value
        
    def reset(self):
        return self.encode_state(self.env.reset())
    
    def step(self, action):
        state, reward, done = self.env.step(action)
        
        return self.encode_state(state), reward, done
    
    def render(self, policy=None, value=None):
        self.env.render(policy, value)

"""#Linear Sarsa"""

def linear_sarsa(env, max_episodes, eta, gamma, epsilon, seed=None):
    random_state = np.random.RandomState(seed)
    random_state
    eta = np.linspace(eta, 0, max_episodes)
    epsilon = np.linspace(epsilon, 0, max_episodes)
    
    theta = np.zeros(env.n_features)
    
    for i in range(max_episodes):
        features = env.reset()
        
        q = features.dot(theta)

        #TODO
        terminal = False
        if np.random.rand() < (1 - epsilon[i]) and max(q) != 0:
            a = np.argmax(q)
        else:
            a = np.random.choice(env.n_actions)
        while not terminal:
            next_features, r, terminal = env.step(a)
            delta = r - q[a]
            q = next_features.dot(theta)
            if np.random.rand() < (1 - epsilon[i]) and max(q) != 0:
                next_a = np.argmax(q)
            else:
                next_a = np.random.choice(env.n_actions)
            delta = delta + gamma*q[next_a]
            theta = theta + eta[i]*delta*features[a]
            features = next_features
            a = next_a
    return theta

"""# linear Q-learning"""

def linear_q_learning(env, max_episodes, eta, gamma, epsilon, seed=None):
    random_state = np.random.RandomState(seed)
    random_state
    eta = np.linspace(eta, 0, max_episodes)
    epsilon = np.linspace(epsilon, 0, max_episodes)
    
    theta = np.zeros(env.n_features)
    
    for i in range(max_episodes):
        features = env.reset()
        
        #TODO
        q = features.dot(theta)
        terminal = False
        while not terminal:
            if np.random.rand() < 1 - epsilon[i] and max(q) != 0:
                a = np.argmax(q)
            else:
                a = np.random.choice(env.n_actions)
            next_features, r, terminal = env.step(a)
            delta = r - q[a]
            q = next_features.dot(theta)
            delta = delta + gamma*max(q)
            theta = theta + eta[i]*delta*features[a]
            features = next_features
    return theta